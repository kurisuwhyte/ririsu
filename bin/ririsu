#!/usr/bin/env escript

%% -*- erlang-indent-level:4; indent-tabs-mode:nil; fill-column:72   -*-
%% ---------------------------------------------------------------------
%% 
%% Copyright (c) 2013 Christina Whyte (kurisu.whyte@gmail.com)
%%
%% Permission is hereby granted, free of charge, to any person obtaining
%% a copy of this software and associated documentation files (the
%% "Software"), to deal in the Software without restriction, including
%% without limitation the rights to use, copy, modify, merge, publish,
%% distribute, sublicense, and/or sell copies of the Software, and to
%% permit persons to whom the Software is furnished to do so, subject to
%% the following conditions:
%%
%% The above copyright notice and this permission notice shall be
%% included in all copies or substantial portions of the Software.
%%
%% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
%% EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
%% MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
%% NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
%% BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
%% ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
%% CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
%% SOFTWARE.
%%
%% ---------------------------------------------------------------------

%% =====================================================================
%% CLI
%% =====================================================================
main(Args) ->
    Dir = filename:dirname(escript:script_name()),
    true = code:add_pathz(Dir ++ "/../beam"),
    app(Args).


app(["help"]) -> usage();
app(["version"]) -> io:format("ririsu 0.1.0");

app(["eval", Expression]) ->
    execute(Expression);

app(["-", "eval", Expression]) ->
    execute(Expression, [to_stack(slurp(standard_io))]);

app(["repl"]) ->
    io:format("Ririsu v0.1.0    (^C to exit)\n"),
    repl();

app(["-", Filename]) ->
    execute(read(Filename), [to_stack(slurp(standard_io))]);

app([Filename]) ->
    execute(read(Filename)).


execute(Source) ->
    execute(Source, []).

execute(Source, Stack) ->
    show(ririsu:run(Source, {0, dict:new(), Stack})).

read(Filename) ->
    {ok, Data} = file:read_file(Filename),
    execute(unicode:characters_to_list(Data)).

to_stack(List) ->
    lists:flatmap(fun(X) ->
                          if X == $\n -> [];
                             true     -> [[X]]
                          end end, List).

show(Term) ->
    io:format("~p", [Term]).

display(Msg) ->
    io:format(Msg).

slurp(File) ->
    Buffer = io:get_chars(File, '', 1),
    case Buffer of
        eof ->
            "";
        _ ->
            Buffer ++ slurp(File)
    end.

repl() ->
    repl({0, dict:new(), []}).

repl(State) ->
    Expression = io:get_line('ririsu> '),
    {Mode, Env, Stack} = ririsu:do(Expression, State),
    io:format("~p\n", [Stack]),
    repl({Mode, Env, Stack}).


usage() ->
    display("ririsu --- The 2^6th most horrible language ever devised.\n"
         ++ "                                                         \n"
         ++ "Usage:                                                   \n"
         ++ "  ririsu help                                            \n"
         ++ "  ririsu version                                         \n"
         ++ "  ririsu [-] <file.ri>                                   \n"
         ++ "  ririsu [-] eval <expression>                           \n"
         ++ "  ririsu repl                                            \n"
         ++ "                                                         \n"
         ++ "The program uses the standard input as the initial stack \n"
         ++ "for the script, and outputs the remaining stack after    \n"
         ++ "evaluating all the expressions.                          \n").
